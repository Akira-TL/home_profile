#!/bin/bash
# export PATH=/home/microbelab/biosoft/singularity3.11/bin:$PATH
# export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/miniconda3/lib #设置动态链接库的路径
# export LIBRARY_PATH=$LIBRARY_PATH:$HOME/miniconda3/lib #设置静态库的路径

# docker rootless 配置，卸载时删除
# export PATH=/usr/bin:$PATH
export DOCKER_HOST=unix:///run/user/1003/docker.sock
# docker rootless config end

# export PATH=$HOME/.local/my_script:$PATH
if [[ $PATH != *"${HOME}/.local/bin:"* ]]; then
    export PATH=$HOME/.local/bin:$PATH
fi
if [[ $PATH != *"${HOME}/.local/docker/bin:"* ]]; then
    export PATH=$HOME/.local/docker/bin:$PATH
fi
if [[ $PATH != *"${HOME}/.local/bwa-mem2:"* ]]; then
    export PATH=$HOME/.local/bwa-mem2:$PATH
fi
export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

# export PATH=$PATH:$HOME/.local/bin

# export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/.local/readline/lib #设置动态链接库的路径
# export LIBRARY_PATH=$LIBRARY_PATH:$HOME/.local/readline/lib #设置静态库的路径

# kraken2 start
export KRAKEN2_NUM_THREADS=16
export KRAKEN2_DB_PATH="/home/tanlang/data/kraken2_dbs:"
export KRAKEN2_DEFAULT_DB="/home/tanlang/data/kraken2_dbs/AF_Met_v2_db"
export BOWTIE2_INDEXES="/home/tanlang/data/bowtie2"
# kraken2 end

# homebrew start
if [[ $PATH != *"/home/linuxbrew/.linuxbrew/sbin:"* ]]; then
    export PATH=/home/linuxbrew/.linuxbrew/sbin:$PATH
fi
if [[ $PATH != *"/home/linuxbrew/.linuxbrew/bin:"* ]]; then
    export PATH=/home/linuxbrew/.linuxbrew/bin:$PATH
fi
if [[ $LD_LIBRARY_PATH != *"/home/linuxbrew/.linuxbrew/lib:"* ]]; then
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/linuxbrew/.linuxbrew/lib #设置动态链接库的路径
    export LIBRARY_PATH=$LIBRARY_PATH:/home/linuxbrew/.linuxbrew/lib       #设置静态库的路径
fi
if [[ $LD_LIBRARY_PATH != *"$HOME/.local/lib:"* ]]; then
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/.local/lib #设置动态链接库的路径
    export LIBRARY_PATH=$LIBRARY_PATH:$HOME/.local/lib       #设置静态库的路径
fi
export HOMEBREW_API_DOMAIN="https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/api"
export HOMEBREW_BOTTLE_DOMAIN="https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles"
export HOMEBREW_BREW_GIT_REMOTE="https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git"
# export HOMEBREW_CORE_GIT_REMOTE="https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git"
export HOMEBREW_PIP_INDEX_URL="https://pypi.tuna.tsinghua.edu.cn/simple"
export XDG_DATA_DIRS="/home/linuxbrew/.linuxbrew/share:$XDG_DATA_DIRS"
# homebrew end

export EGGNOG_DATA_DIR="${HOME}/database/eggnog"

export GTDBTK_DATA_PATH="/ds1821/tanlang/database/gtdbtk/release220"

LOGIN_IP=$(last "$(whoami)" | grep -oP ".*(\d*\.\d*\.\d*\.\d*).*still logged in" | grep -oP "(\d*\.\d*\.\d*\.\d*)" | head -n 1)
export LOGIN_IP
export DISPLAY="$LOGIN_IP:0.0"

# 判断.shell_log是否存在并生成
if [ ! -d "${HOME}/.shell_log" ]; then
    mkdir "${HOME}/.shell_log"
fi
if [[ -n "$STY" ]]; then
    # 从 STY 变量中提取会话 ID，再通过 screen -ls 解析名称
    session_id=$(echo $STY | cut -d. -f1)
    SCREEN_NAME=$(screen -ls | awk -v id="$session_id" '$0 ~ id {print $1}' | cut -d. -f2)
    export SCREEN_NAME
else
    SCREEN_NAME=pts$(tty | cut -d'/' -f4)
    export SCREEN_NAME
fi
logf="${HOME}/.shell_log/${SCREEN_NAME}_$(date +%Y-%m-%d_%H:%M:%S).log" # 单终端的临时输出文件
export logf
